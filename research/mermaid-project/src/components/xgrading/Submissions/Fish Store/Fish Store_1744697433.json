{
  "questionId": "Fish Store",
  "code": "// Interfaces\ninterface Cleanable {\n    void clean();\n}\n\ninterface Swimmable {\n    void swim();\n}\n\n// Tank Class\nclass Tank implements Cleanable {\n    private int number;\n    private float volume;\n    \n    public void addFish(Fish fish) {\n        // Implementation without using fishList field\n    }\n    \n    public void removeFish(String fishName) {\n        // Implementation without using fishList field\n    }\n    \n    public List<Fish> getFishList() {\n        return null; // Return empty or mock list\n    }\n    \n    public void cleanTank() {\n        // Implementation\n    }\n    \n    @Override\n    public void clean() {\n        // Required for interface implementation\n    }\n}\n\n// Fish Class\nclass Fish implements Swimmable {\n    private String name;\n    private float weight;\n    \n    public void updateWeight(float newWeight) {\n        this.weight = newWeight;\n    }\n    \n    public Species getSpecies() {\n        return null; // Return mock object\n    }\n    \n    public void addEvent(Event event) {\n        // Implementation without using events field\n    }\n    \n    public List<Event> getEventHistory() {\n        return null; // Return empty or mock list\n    }\n    \n    @Override\n    public void swim() {\n        // Required for interface implementation\n    }\n}\n\n// Species Class\nclass Species {\n    private String name;\n    private String preferredFood;\n    \n    public String getPreferredFood() {\n        return preferredFood;\n    }\n    \n    public void setPreferredFood(String food) {\n        this.preferredFood = food;\n    }\n}\n\n// Event Class\nclass Event {\n    private Date date;\n    private String note;\n    \n    public Date getDate() {\n        return date;\n    }\n    \n    public void setNote(String note) {\n        this.note = note;\n    }\n}",
  "schema": [],
  "relationships": [],
  "timestamp": 1744697433
}